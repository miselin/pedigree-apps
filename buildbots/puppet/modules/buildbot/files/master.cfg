# -*- python -*-
# ex: set syntax=python:

# Contains secrets, not in source control.
import local

from buildbot.buildslave import AbstractLatentBuildSlave
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.forcesched import ForceScheduler, BooleanParameter
from buildbot.changes import filter
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.shell import ShellCommand, Compile, SetPropertyFromCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.process.properties import Property
from buildbot.steps.trigger import Trigger
from buildbot.steps.master import MasterShellCommand
from buildbot.config import BuilderConfig
from buildbot.status import html
from buildbot.status.web import authz, auth

from twisted.internet import reactor
from twisted.internet.defer import Deferred
from twisted.internet.error import ProcessDone
from twisted.internet.protocol import ProcessProtocol


class GcloudProtocol(ProcessProtocol):
    def connectionMade(self):
        self.d = Deferred()

    def processEnded(self, reason):
        if reason.check(ProcessDone):
            self.d.callback()
        else:
            self.d.errback(reason)


class GCESlave(AbstractLatentBuildSlave):

    def start_instance(self):
        prot = GcloudProtocol()
        reactor.spawnProcess('/home/manager/google-cloud-sdk/bin/gcloud',
            ['gcloud', 'compute', 'instances', 'start', 'buildbot-slave'])
        return prot.d


    def stop_instance(self, fast=False):
        prot = GcloudProtocol()
        reactor.spawnProcess('/home/manager/google-cloud-sdk/bin/gcloud',
            ['gcloud', 'compute', 'instances', 'stop', 'buildbot-slave'])
        return prot.d


# Main buildmaster config.
c = BuildmasterConfig = {}

# About this project.
c['title'] = "Pedigree"
c['titleURL'] = "https://www.pedigree-project.org"
c['buildbotURL'] = "https://build.pedigree-project.org/"

# Slaves.
c['slaves'] = [
    GCESlave(),
]
c['protocols'] = {'pb': {'port': 9989}}

# Git repos.
c['change_source'] = []
c['change_source'].append(GitPoller(
    project='pedigree',
    repourl='git://github.com/miselin/pedigree.git',
    workdir='gitpoller-pedigree-workdir', branch='develop',
    pollinterval=300))
c['change_source'].append(GitPoller(
    project='pedigree-apps',
    repourl='git://github.com/miselin/pedigree-apps.git',
    workdir='gitpoller-pedigree-apps-workdir', branch='master',
    pollinterval=300))

# Build schedulers.
c['schedulers'] = []
sched_pedigree = SingleBranchScheduler(
    name="pedigree",
    change_filter=filter.ChangeFilter(project='pedigree', branch='develop'),
    treeStableTimer=None,
    builderNames=["easy_build_x86_64"])

sched_pedigree_arm = SingleBranchScheduler(
    name="pedigree-arm",
    change_filter=filter.ChangeFilter(project='pedigree', branch='develop'),
    treeStableTimer=None,
    builderNames=["easy_build_arm"])

sched_apps = SingleBranchScheduler(
    name="pedigree-apps",
    change_filter=filter.ChangeFilter(project='pedigree-apps',
                                      branch='master'),
    treeStableTimer=None,
    builderNames=["pedigree-apps"])

sched_apps_arm = SingleBranchScheduler(
    name="pedigree-apps-arm",
    change_filter=filter.ChangeFilter(project='pedigree-apps',
                                      branch='master'),
    treeStableTimer=None,
    builderNames=["pedigree-apps-arm"])

sched_docs = SingleBranchScheduler(
    name="pedigree-docs",
    change_filter=filter.ChangeFilter(project='pedigree', branch='develop'),
    treeStableTimer=None,
    builderNames=["pedigree-docs"])

sched_force = ForceScheduler(
    name="force",
    properties=[
        BooleanParameter(name="clean", label="Clean before build.",
            default=False),
        BooleanParameter(name="nightly", label="This is a nightly.",
            default=False),
    ],
    builderNames=["easy_build_x86_64", "easy_build_arm", "pedigree-apps",
                  "pedigree-apps-arm", "pedigree-docs"])

sched_pedigree_trigger = Triggerable(
    name="pedigree-trigger",
    builderNames=["easy_build_x86_64"])

sched_pedigree_arm_trigger = Triggerable(
    name="pedigree-arm-trigger",
    builderNames=["easy_build_arm"])

nightly_pedigree = Nightly(
    name='pedigree-nightly',
    branch=None,
    properties={'clean': True, 'nightly': True},
    # pedigree-apps triggers all other builders.
    builderNames=["pedigree-apps", "pedigree-apps-arm", "pedigree-docs"],
    hour=3)

c['schedulers'] = [
    sched_pedigree, sched_pedigree_arm, sched_apps, sched_force,
    sched_pedigree_trigger, nightly_pedigree, sched_pedigree_arm_trigger,
    sched_apps_arm, sched_docs]


# Checks if a clean has been requested.
def ShouldClean(step):
    return bool(step.build.getProperty('clean'))

# Checks if this build is a nightly.
def IsNightly(step):
    return bool(step.build.getProperty('nightly'))

# Pedigree Main repo.
factory = BuildFactory()
factory.addStep(Git(repourl='git://github.com/miselin/pedigree.git',
                mode='incremental'))
factory.addStep(ShellCommand(
    command=["rm", "-f", "options.cache"], doStepIf=ShouldClean))
factory.addStep(RemoveDirectory(dir="./build", doStepIf=ShouldClean))
factory.addStep(RemoveDirectory(
    dir="./images/local/support/pup/db", doStepIf=ShouldClean))
factory.addStep(Compile(command=["./easy_build_x64.sh"], timeout=1800))
factory.addStep(Compile(command=[
    "./build-etc/release.sh", "./build", "/tmp/pedigree-release",
    "pedigree-latest"], timeout=1800, description="upload latest ISO",
    env={'KEYCDN_KEYPATH': local.cdn_key}))
factory.addStep(Compile(command=[
    "./build-etc/release.sh", "./build", "/tmp/pedigree-release",
    "pedigree-nightly"], timeout=1800, doStepIf=IsNightly,
    description="upload nightly ISO", env={'KEYCDN_KEYPATH': local.cdn_key}))

# Pedigree ARM build.
arm_factory = BuildFactory()
arm_factory.addStep(Git(repourl='git://github.com/miselin/pedigree.git',
                    mode='incremental'))
arm_factory.addStep(ShellCommand(
    command=["rm", "-f", "options.cache"], doStepIf=ShouldClean))
arm_factory.addStep(RemoveDirectory(
    dir="./build", doStepIf=ShouldClean))
arm_factory.addStep(RemoveDirectory(
    dir="./images/local/support/pup/db", doStepIf=ShouldClean))
arm_factory.addStep(Compile(command=["./easy_build_arm.sh", "debian"],
                            timeout=1800))

# Pedigree Apps repo.
apps_factory = BuildFactory()
apps_factory.addStep(Git(
    repourl='git://github.com/miselin/pedigree-apps.git', mode='incremental'))
apps_factory.addStep(ShellCommand(command=["./standalone.sh"], timeout=None,
                                  description='Standalone preparation'))
apps_factory.addStep(Compile(command=["./buildPackages.sh", "amd64"],
                             warningPattern="Building .* failed\.$",
                             timeout=None))
apps_factory.addStep(ShellCommand(
    command="dot -Tsvg dependencies.dot -o ./downloads/deps.svg"))
apps_factory.addStep(ShellCommand(command="./pup/build.sh",
                                  description="build pup"))
apps_factory.addStep(ShellCommand(
    command="./buildbots/dist.sh ./pup/package_repo zones/pup",
    description="upload packages", env={'KEYCDN_KEYPATH': local.cdn_key}))
apps_factory.addStep(ShellCommand(
    command="./buildbots/dist.sh ./downloads/ zones/pupsrc",
    description="upload sources", env={'KEYCDN_KEYPATH': local.cdn_key}))
apps_factory.addStep(Trigger(schedulerNames=['pedigree-trigger'],
                             waitForFinish=True, alwaysUseLatest=True,
                             copy_properties=['clean', 'nightly']))

arm_apps_factory = BuildFactory()
arm_apps_factory.addStep(Git(
    repourl='git://github.com/miselin/pedigree-apps.git', mode='incremental'))
arm_apps_factory.addStep(ShellCommand(command=["./standalone.sh", "arm"],
                                      timeout=None,
                                      description='Standalone preparation'))
arm_apps_factory.addStep(Compile(command=["./buildPackages.sh", "arm"],
                                 warningPattern="Building .* failed\.$",
                                 timeout=None))
arm_apps_factory.addStep(ShellCommand(
    command="dot -Tsvg dependencies.dot -o ./downloads/deps-arm.svg"))
arm_apps_factory.addStep(ShellCommand(
    command="./buildbots/dist.sh ./pup/package_repo zones/pup",
    description="upload packages", env={'KEYCDN_KEYPATH': local.cdn_key}))
arm_apps_factory.addStep(ShellCommand(
    command="./buildbots/dist.sh ./downloads/ zones/pupsrc",
    description="upload sources", env={'KEYCDN_KEYPATH': local.cdn_key}))
arm_apps_factory.addStep(Trigger(schedulerNames=['pedigree-arm-trigger'],
                                 waitForFinish=True, alwaysUseLatest=True,
                                 copy_properties=['clean', 'nightly']))

# Pedigree docs.
doxygen_factory = BuildFactory()
doxygen_factory.addStep(Git(repourl='git://github.com/miselin/pedigree.git',
                            mode='incremental'))
doxygen_factory.addStep(Compile(command=["doxygen"]))
doxygen_factory.addStep(DirectoryUpload(slavesrc="docs", masterdest="~/docs"))
doxygen_factory.addStep(MasterShellCommand(
    command="find $HOME/docs -type d -print0 | xargs -0 chmod a+rx"))
doxygen_factory.addStep(MasterShellCommand(
    command="find $HOME/docs -type f -print0 | xargs -0 chmod a+r"))

c['builders'] = []

c['builders'].append(
    BuilderConfig(name="easy_build_x86_64",
                  slavenames=["pedigree"],
                  factory=factory))

c['builders'].append(
    BuilderConfig(name="easy_build_arm",
                  slavenames=["pedigree"],
                  factory=arm_factory))

c['builders'].append(
    BuilderConfig(name="pedigree-apps",
                  slavenames=["pedigree"],
                  factory=apps_factory))

c['builders'].append(
    BuilderConfig(name='pedigree-apps-arm',
                  slavenames=['pedigree'],
                  factory=arm_apps_factory))

c['builders'].append(
    BuilderConfig(name='pedigree-docs',
                  slavenames=['pedigree'],
                  factory=doxygen_factory))

# Require auth for all build operations.
creds = ("pedigree", local.web_password)
authz_cfg = authz.Authz(auth=auth.BasicAuth([creds]),
                        gracefulShutdown='auth',
                        forceBuild='auth',
                        forceAllBuilds='auth',
                        pingBuilder='auth',
                        stopBuild='auth',
                        stopAllBuilds='auth',
                        cancelPendingBuild='auth')

# Web frontend (not exposed directly to the wider internet)
c['status'] = []
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# Tracking database.
c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
