# -*- python -*-
# ex: set syntax=python:

# Contains secrets, not in source control.
import local

from buildbot.buildslave import BuildSlave
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.forcesched import ForceScheduler, BooleanParameter
from buildbot.changes import filter
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.shell import ShellCommand, Compile, SetPropertyFromCommand
from buildbot.steps.transfer import DirectoryUpload
from buildbot.process.properties import Property
from buildbot.steps.trigger import Trigger
from buildbot.steps.master import MasterShellCommand
from buildbot.config import BuilderConfig
from buildbot.status import html
from buildbot.status.web import authz, auth


# Main buildmaster config.
c = BuildmasterConfig = {}

# About this project.
c['title'] = "Pedigree"
c['titleURL'] = "http://www.pedigree-project.org"
c['buildbotURL'] = "http://build.pedigree-project.org/"

# Slaves.
c['slaves'] = [
    BuildSlave("pedigree", local.slave_password),
]
c['protocols'] = {'pb': {'port': 9989}}

# Git repos.
c['change_source'] = []
c['change_source'].append(GitPoller(
    project='pedigree',
    repourl='git://github.com/miselin/pedigree.git',
    workdir='gitpoller-pedigree-workdir', branch='develop',
    pollinterval=300))
c['change_source'].append(GitPoller(
    project='pedigree-apps',
    repourl='git://github.com/miselin/pedigree-apps.git',
    workdir='gitpoller-pedigree-apps-workdir', branch='master',
    pollinterval=300))

# Build schedulers.
c['schedulers'] = []
sched_pedigree = SingleBranchScheduler(
    name="pedigree",
    change_filter=filter.ChangeFilter(project='pedigree', branch='develop'),
    treeStableTimer=None,
    builderNames=["easy_build_x86_64"])

sched_pedigree_arm = SingleBranchScheduler(
    name="pedigree-arm",
    change_filter=filter.ChangeFilter(project='pedigree', branch='develop'),
    treeStableTimer=None,
    builderNames=["easy_build_arm"])

sched_apps = SingleBranchScheduler(
    name="pedigree-apps",
    change_filter=filter.ChangeFilter(project='pedigree-apps',
                                      branch='master'),
    treeStableTimer=None,
    builderNames=["pedigree-apps"])

sched_apps_arm = SingleBranchScheduler(
    name="pedigree-apps-arm",
    change_filter=filter.ChangeFilter(project='pedigree-apps',
                                      branch='master'),
    treeStableTimer=None,
    builderNames=["pedigree-apps-arm"])

sched_docs = SingleBranchScheduler(
    name="pedigree-docs",
    change_filter=filter.ChangeFilter(project='pedigree', branch='develop'),
    treeStableTimer=None,
    builderNames=["pedigree-docs"])

sched_force = ForceScheduler(
    name="force",
    properties=[BooleanParameter(name="clean", label="Clean before build.",
                default=False)],
    builderNames=["easy_build_x86_64", "easy_build_arm", "pedigree-apps",
                  "pedigree-apps-arm", "pedigree-compiler",
                  "pedigree-compiler-arm", "pedigree-docs"])

sched_pedigree_trigger = Triggerable(
    name="pedigree-trigger",
    builderNames=["easy_build_x86_64"])

sched_pedigree_arm_trigger = Triggerable(
    name="pedigree-arm-trigger",
    builderNames=["easy_build_arm"])

sched_pedigree_compiler_trigger = Triggerable(
    name="pedigree-compiler-trigger",
    builderNames=["pedigree-compiler"])

sched_pedigree_compiler_arm_trigger = Triggerable(
    name="pedigree-compiler-arm-trigger",
    builderNames=["pedigree-compiler-arm"])

nightly_pedigree = Nightly(
    name='pedigree-nightly',
    branch=None,
    properties={'clean': True, 'nightly': True},
    # pedigree-apps triggers all other builders.
    builderNames=["pedigree-apps", "pedigree-apps-arm", "pedigree-docs"],
    hour=3)

c['schedulers'] = [
    sched_pedigree, sched_pedigree_arm, sched_apps, sched_force,
    sched_pedigree_trigger, sched_pedigree_compiler_trigger, nightly_pedigree,
    sched_pedigree_arm_trigger, sched_apps_arm,
    sched_pedigree_compiler_arm_trigger, sched_docs]


# Checks if a clean has been requested.
def ShouldClean(step):
    return bool(step.build.getProperty('clean'))

# Checks if this build is a nightly.
def IsNightly(step):
    return bool(step.build.getProperty('clean'))

# Pedigree Main repo.
factory = BuildFactory()
factory.addStep(Git(repourl='git://github.com/miselin/pedigree.git',
                mode='incremental'))
factory.addStep(SetPropertyFromCommand(
    command="echo $HOME/buildbot-etc/easyos",
    property="easyos_path"))
factory.addStep(ShellCommand(
    command=["ln", "-sf", Property("easyos_path"), ".easy_os"]))
factory.addStep(ShellCommand(
    command=["rm", "-f", "options.cache"], doStepIf=ShouldClean))
factory.addStep(RemoveDirectory(dir="build/build", doStepIf=ShouldClean))
factory.addStep(RemoveDirectory(
    dir="build/images/local/support/pup/db", doStepIf=ShouldClean))
factory.addStep(Compile(command=["./easy_build_x64.sh"], timeout=1800))
factory.addStep(ShellCommand(
    command="rsync -av --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r "
            "-e \"ssh -i %s\" build/pedigree.iso "
            "miselin@rsync.keycdn.com:zones/download/latest.iso" % local.cdn_key,
            description="upload iso"))
factory.addStep(ShellCommand(
    command="rsync -av --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r "
            "-e \"ssh -i %s\" build/pedigree.iso "
            "miselin@rsync.keycdn.com:zones/download/nightly.iso" % local.cdn_key,
            description="upload iso", doStepIf=IsNightly))
factory.addStep(ShellCommand(command="pwd > /tmp/pedigree-workdir"))

# Pedigree ARM build.
arm_factory = BuildFactory()
arm_factory.addStep(Git(repourl='git://github.com/miselin/pedigree.git',
                    mode='incremental'))
arm_factory.addStep(SetPropertyFromCommand(
    command="echo $HOME/buildbot-etc/easyos", property="easyos_path"))
arm_factory.addStep(ShellCommand(
    command=["ln", "-sf", Property("easyos_path"), ".easy_os"]))
arm_factory.addStep(ShellCommand(
    command=["rm", "-f", "options.cache"], doStepIf=ShouldClean))
arm_factory.addStep(RemoveDirectory(
    dir="build/build", doStepIf=ShouldClean))
arm_factory.addStep(RemoveDirectory(
    dir="build/images/local/support/pup/db", doStepIf=ShouldClean))
arm_factory.addStep(Compile(command=["./easy_build_arm.sh"], timeout=1800))
arm_factory.addStep(ShellCommand(command="pwd > /tmp/pedigree-arm-workdir"))

# Pedigree Compiler (but not the rest).
compiler_factory = BuildFactory()
compiler_factory.addStep(RemoveDirectory(dir="build",
                                         doStepIf=ShouldClean))
compiler_factory.addStep(Git(repourl='git://github.com/miselin/pedigree.git',
                         mode='incremental'))
compiler_factory.addStep(ShellCommand(
    command="./scripts/checkBuildSystemNoInteractive.pl x86_64-pedigree "
            "$PWD/pedigree-compiler", timeout=3600))
compiler_factory.addStep(ShellCommand(
    command="scons CROSS=$PWD/compilers/dir/bin/x86_64-pedigree- "
            "build/libc.so build/libm.so"))
compiler_factory.addStep(ShellCommand(
    command="./scripts/checkBuildSystemNoInteractive.pl x86_64-pedigree "
            "$PwD/pedigree-compiler libcpp", timeout=3600))
# Save working directory - this is for the compiler, so this works fine.
compiler_factory.addStep(ShellCommand(command="pwd > /tmp/pedigree-workdir"))

arm_compiler_factory = BuildFactory()
arm_compiler_factory.addStep(RemoveDirectory(dir="build",
                                             doStepIf=ShouldClean))
arm_compiler_factory.addStep(Git(
    repourl='git://github.com/miselin/pedigree.git', mode='incremental'))
arm_compiler_factory.addStep(ShellCommand(
    command="./scripts/checkBuildSystemNoInteractive.pl arm-pedigree "
            "$PWD/pedigree-compiler", timeout=3600))
arm_compiler_factory.addStep(ShellCommand(
    command="scons CROSS=$PWD/compilers/dir/bin/arm-pedigree- arm_beagle=1 "
            "armv7=1 arm_cortex_a8=1  build/libc.so build/libm.so"))
arm_compiler_factory.addStep(ShellCommand(
    command="./scripts/checkBuildSystemNoInteractive.pl arm-pedigree "
            "$PwD/pedigree-compiler libcpp", timeout=3600))
# Save working directory - this is for the compiler, so this works fine.
arm_compiler_factory.addStep(ShellCommand(
    command="pwd > /tmp/pedigree-arm-workdir"))

# TODO: the trigger from building pedigree-apps should ask the Pedigree build
# to clean up the PUP DB directory, so it gets the actual new packages...

# Pedigree Apps repo.
apps_factory = BuildFactory()
apps_factory.addStep(Git(
    repourl='git://github.com/miselin/pedigree-apps.git',
    mode='incremental'))
# Make sure we have a working build environment.
apps_factory.addStep(Trigger(schedulerNames=['pedigree-compiler-trigger'],
                             waitForFinish=True, alwaysUseLatest=True))
apps_factory.addStep(SetPropertyFromCommand(
    command="cat /tmp/pedigree-workdir", property="pedigree-workdir"))
apps_factory.addStep(SetPropertyFromCommand(
    command="echo $HOME/buildbot-etc/local_environment-amd64.py",
    property="apps-env"))
apps_factory.addStep(ShellCommand(
    command=["ln", "-sf", Property("apps-env"), "local_environment.py"],
    description="prep env"))
apps_factory.addStep(Compile(command=["./buildPackages.sh", "amd64"],
                             warningPattern="Building .* failed\.$",
                             timeout=None))
apps_factory.addStep(ShellCommand(
    command="dot -Tsvg dependencies.dot -o "
            "$HOME/pedigree-apps/downloads/deps.svg"))
apps_factory.addStep(ShellCommand(
    command="python3 setup.py bdist_wheel && cp dist/pup*.whl "
            "$HOME/pedigree-apps/pup/package_repo/pup.whl",
    workdir="build/pup", description="build pup"))
apps_factory.addStep(ShellCommand(
    command="rsync -av --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r "
            "-e \"ssh -i %s\" $HOME/pedigree-apps/pup/package_repo/* "
            "miselin@rsync.keycdn.com:zones/pup/" % local.cdn_key,
            description="upload packages"))
apps_factory.addStep(ShellCommand(
    command="rsync -av --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r "
            "-e \"ssh -i %s\" $HOME/pedigree-apps/downloads/* "
            "miselin@rsync.keycdn.com:zones/pupsrc/" % local.cdn_key,
            description="upload sources"))
# Build Pedigree again, having finished building the latest set of packages.
apps_factory.addStep(Trigger(schedulerNames=['pedigree-trigger'],
                             waitForFinish=True, alwaysUseLatest=True,
                             copy_properties=['clean']))

arm_apps_factory = BuildFactory()
arm_apps_factory.addStep(Git(
    repourl='git://github.com/miselin/pedigree-apps.git',
    mode='incremental'))
# Make sure we have a working build environment.
arm_apps_factory.addStep(Trigger(
    schedulerNames=['pedigree-compiler-arm-trigger'], waitForFinish=True,
    alwaysUseLatest=True))
arm_apps_factory.addStep(SetPropertyFromCommand(
    command="cat /tmp/pedigree-arm-workdir", property="pedigree-workdir"))
arm_apps_factory.addStep(SetPropertyFromCommand(
    command="echo $HOME/buildbot-etc/local_environment-arm.py",
    property="apps-env"))
arm_apps_factory.addStep(ShellCommand(
    command=["ln", "-sf", Property("apps-env"), "local_environment.py"]))
arm_apps_factory.addStep(Compile(command=["./buildPackages.sh", "arm"],
                                 warningPattern="Building .* failed\.$",
                                 timeout=None))
arm_apps_factory.addStep(ShellCommand(
    command="dot -Tsvg dependencies.dot -o "
            "$HOME/pedigree-apps/downloads/deps-arm.svg"))
arm_apps_factory.addStep(ShellCommand(
    command="rsync -av --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r "
            "-e \"ssh -i %s\" $HOME/pedigree-apps/pup/package_repo/* "
            "miselin@rsync.keycdn.com:zones/pup/" % local.cdn_key))
arm_apps_factory.addStep(ShellCommand(
    command="rsync -av --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r "
            "-e \"ssh -i %s\" $HOME/pedigree-apps/downloads/* "
            "miselin@rsync.keycdn.com:zones/pupsrc/" % local.cdn_key))
# Build Pedigree again, having finished building the latest set of packages.
arm_apps_factory.addStep(Trigger(schedulerNames=['pedigree-arm-trigger'],
                                 waitForFinish=True, alwaysUseLatest=True,
                                 copy_properties=['clean']))

# Pedigree docs.
doxygen_factory = BuildFactory()
doxygen_factory.addStep(Git(repourl='git://github.com/miselin/pedigree.git',
                            mode='incremental'))
doxygen_factory.addStep(Compile(command=["doxygen"]))
doxygen_factory.addStep(DirectoryUpload(slavesrc="docs", masterdest="~/docs"))
doxygen_factory.addStep(MasterShellCommand(
    command="find $HOME/docs -type d -print0 | xargs -0 chmod a+rx"))
doxygen_factory.addStep(MasterShellCommand(
    command="find $HOME/docs -type f -print0 | xargs -0 chmod a+r"))

c['builders'] = []

c['builders'].append(
    BuilderConfig(name="easy_build_x86_64",
                  slavenames=["pedigree"],
                  factory=factory))

c['builders'].append(
    BuilderConfig(name="easy_build_arm",
                  slavenames=["pedigree"],
                  factory=arm_factory))

c['builders'].append(
    BuilderConfig(name="pedigree-compiler",
                  slavenames=["pedigree"],
                  factory=compiler_factory))

c['builders'].append(
    BuilderConfig(name="pedigree-compiler-arm",
                  slavenames=["pedigree"],
                  factory=arm_compiler_factory))

c['builders'].append(
    BuilderConfig(name="pedigree-apps",
                  slavenames=["pedigree"],
                  factory=apps_factory,
                  env={
                      'PATH_TO_CHROOT_SCRIPT': '/home/manager/pedigree-apps'
                  }))

c['builders'].append(
    BuilderConfig(name='pedigree-apps-arm',
                  slavenames=['pedigree'],
                  factory=arm_apps_factory,
                  env={
                      'PATH_TO_CHROOT_SCRIPT': '/home/manager/pedigree-apps'
                  }))

c['builders'].append(
    BuilderConfig(name='pedigree-docs',
                  slavenames=['pedigree'],
                  factory=doxygen_factory))

# Require auth for all build operations.
creds = ("pedigree", local.web_password)
authz_cfg = authz.Authz(auth=auth.BasicAuth([creds]),
                        gracefulShutdown='auth',
                        forceBuild='auth',
                        forceAllBuilds='auth',
                        pingBuilder='auth',
                        stopBuild='auth',
                        stopAllBuilds='auth',
                        cancelPendingBuild='auth')

# Web frontend (not exposed directly to the wider internet)
c['status'] = []
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# Tracking database.
c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
