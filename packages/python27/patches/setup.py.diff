--- ../Python-2.6.6-old/setup.py	2010-07-17 22:31:09.000000000 +1000
+++ ./setup.py	2010-11-11 19:32:42.002459000 +1000
@@ -20,6 +20,13 @@ from distutils.spawn import find_executa
 # This global variable is used to hold the list of modules to be disabled.
 disabled_module_list = []
 
+if os.environ.get('CROSS_COMPILING') == 'yes':
+    sysconfig.get_config_vars()
+    sysconfig._CONFIG_VARS.update(os.environ)
+else:
+    sysconfig.get_config_vars()
+    sysconfig._CONFIG_VARS['srcdir'] = os.environ['srcdir']
+
 def add_dir_to_list(dirlist, dir):
     """Add the directory 'dir' to the list 'dirlist' (at the front) if
     1) 'dir' is not already in 'dirlist'
@@ -313,6 +320,8 @@ class PyBuildExt(build_ext):
             self.announce('WARNING: skipping import check for Cygwin-based "%s"'
                 % ext.name)
             return
+        if os.environ.get('CROSS_COMPILING') == 'yes':
+            return
         ext_filename = os.path.join(
             self.build_lib,
             self.get_ext_filename(self.get_ext_fullname(ext.name)))
@@ -339,11 +339,15 @@ class PyBuildExt(build_ext):
             self.failed.append(ext.name)
 
     def get_platform(self):
-        # Get value of sys.platform
+        # Get value of target's sys.platform
+        p = sys.platform
+        if os.environ.get('CROSS_COMPILING') == 'yes':
+            p = os.environ.get('MACHDEP').lower()
+
         for platform in ['cygwin', 'beos', 'darwin', 'atheos', 'osf1']:
-            if sys.platform.startswith(platform):
+            if p.startswith(platform):
                 return platform
-        return sys.platform
+        return p
 
     def add_multiarch_paths(self):
         # Debian/Ubuntu multiarch support.
@@ -368,10 +368,21 @@ class PyBuildExt(build_ext):
             os.unlink(tmpfile)
 
     def detect_modules(self):
+        xcompile_override = False
+
         # Ensure that /usr/local is always used
-        add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-        add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
-        self.add_multiarch_paths()
+        if os.environ.get('CROSS_COMPILING') != 'yes':
+            add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
+            add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+            self.add_multiarch_paths()
+        else:
+            sysinclude = os.environ.get('XCOMPILE_SYSINCLUDE')
+            if sysinclude:
+                add_dir_to_list(self.compiler.include_dirs, sysinclude)
+
+            # Override bitness (for where we target 32-bit but are running 64-bit python)
+            if os.environ.get('ARCH_BITS') == '32':
+                xcompile_override = True
 
         # Add paths specified in the environment variables LDFLAGS and
         # CPPFLAGS for header and library files.
@@ -407,11 +431,18 @@ class PyBuildExt(build_ext):
         # lib_dirs and inc_dirs are used to search for files;
         # if a file is found in one of those directories, it can
         # be assumed that no additional -I,-L directives are needed.
-        lib_dirs = self.compiler.library_dirs + [
-            '/lib64', '/usr/lib64',
-            '/lib', '/usr/lib',
-            ]
-        inc_dirs = self.compiler.include_dirs + ['/usr/include']
+        inc_dirs = []
+        lib_dirs = []
+        if os.environ.get('CROSS_COMPILING') != 'yes':
+            lib_dirs = self.compiler.library_dirs + [
+                '/lib64', '/usr/lib64',
+                '/lib', '/usr/lib',
+                ]
+            inc_dirs = self.compiler.include_dirs + ['/usr/include']
+        else:
+            lib_dirs = self.compiler.library_dirs
+            inc_dirs = self.compiler.include_dirs
+
         exts = []
         missing = []
 
@@ -594,7 +625,7 @@ class PyBuildExt(build_ext):
         exts.append( Extension('audioop', ['audioop.c']) )
 
         # Disabled on 64-bit platforms
-        if sys.maxint != 9223372036854775807L:
+        if sys.maxint != 9223372036854775807L or xcompile_override:
             # Operations on images
             exts.append( Extension('imageop', ['imageop.c']) )
         else:
@@ -845,6 +863,9 @@ class PyBuildExt(build_ext):
             db_inc_paths.append('/usr/local/include/db3%d' % x)
             db_inc_paths.append('/pkg/db-3.%d/include' % x)
             db_inc_paths.append('/opt/db-3.%d/include' % x)
+        
+        if os.environ.get('CROSS_COMPILING') == 'yes':
+            db_inc_paths = []
 
         # Add some common subdirectories for Sleepycat DB to the list,
         # based on the standard include directories. This way DB3/4 gets
@@ -997,6 +1018,9 @@ class PyBuildExt(build_ext):
         MIN_SQLITE_VERSION_NUMBER = (3, 0, 8)
         MIN_SQLITE_VERSION = ".".join([str(x)
                                     for x in MIN_SQLITE_VERSION_NUMBER])
+        
+        if os.environ.get('CROSS_COMPILING') == 'yes':
+            sqliteinc_paths = []
 
         # Scan the default include directories before the SQLite specific
         # ones. This allows one to override the copy of sqlite on OSX,
@@ -1095,6 +1119,8 @@ class PyBuildExt(build_ext):
         # the more recent berkeleydb's db.h file first in the include path
         # when attempting to compile and it will fail.
         f = "/usr/include/db.h"
+        if os.environ.get('CROSS_COMPILING') == 'yes':
+            f = ''
 
         if sys.platform == 'darwin':
             if is_macosx_sdk_path(f):
@@ -1345,7 +1384,7 @@ class PyBuildExt(build_ext):
                 missing.append('_codecs_%s' % loc)
 
         # Dynamic loading module
-        if sys.maxint == 0x7fffffff:
+        if sys.maxint == 0x7fffffff or xcompile_override:
             # This requires sizeof(int) == sizeof(long) == sizeof(char*)
             dl_inc = find_file('dlfcn.h', [], inc_dirs)
             if (dl_inc is not None) and (platform not in ['atheos']):
@@ -1825,6 +1864,14 @@ class PyBuildExt(build_ext):
                 mkpath(ffi_builddir)
                 config_args = []
 
+                if os.environ.get('CROSS_COMPILING') == 'yes':
+                    arch = os.environ.get("ARCH_TARGET")
+                    targ = os.environ.get("MACHDEP")
+
+                    host = "%s-%s" % (arch, targ)
+                    if host:
+                        config_args += ['--host %s' % (host,)]
+
                 # Pass empty CFLAGS because we'll just append the resulting
                 # CFLAGS to Python's; -g or -O2 is to be avoided.
                 cmd = "cd %s && env CFLAGS='' '%s/configure' %s" \
